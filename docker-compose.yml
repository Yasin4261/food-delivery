services:
  # PostgreSQL Veritabanı
  db:
    image: postgres:15-alpine
    container_name: ecommerce_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go API Uygulaması
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecommerce_api
    restart: unless-stopped
    ports:
      - "3001:8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=ecommerce
    networks:
      - ecommerce_network
    volumes:
      - ./config:/root/config

  # pgAdmin (PostgreSQL yönetimi için modern arayüz)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ecommerce_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ecommerce.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8081:80"
    depends_on:
      - db
    networks:
      - ecommerce_network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Adminer (Daha basit ve modern DB arayüzü)
  adminer:
    image: adminer:latest
    container_name: ecommerce_adminer
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    networks:
      - ecommerce_network
    depends_on:
      - db

volumes:
  postgres_data:
  pgadmin_data:
    driver: local

networks:
  ecommerce_network:
    driver: bridge
